/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import Controller.InvoiceController;
import CustomEntity.DishOrder;
import Entity.Order;
import Model.InvoiceModel;
import java.awt.Color;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author MINH
 */
public class Invoice extends javax.swing.JFrame {

    // DECLARATION
    private InvoiceController invoiceController;
    private InvoiceModel invoiceModel = new InvoiceModel();
    private DefaultTableModel orderDishesTableModel;
    private int orderID;
    private String customerName;
    private boolean status;
    private Date dateOrder;
    private String totalPrice;
    
    public Invoice(int id) {
        initComponents();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        // Center the views
        this.setLocationRelativeTo(null);
        // Set background color
        Color backgroundColor = new Color(255,255,255);
        getContentPane().setBackground(backgroundColor);
        // Set icon image and title
        ImageIcon icon = new ImageIcon(getClass().getResource("/Assets/logo.png")); // Replace with the actual path
        setIconImage(icon.getImage());
        setTitle("BM Restaurant");
        tblDishOrder.setRowMargin(30);
        orderDishesTableModel = (DefaultTableModel)tblDishOrder.getModel();
        orderID = id;
        
        invoiceController = new InvoiceController(invoiceModel, this);
        invoiceController.getListOrderDishes(id);
        invoiceController.getTotalMoney(id);
        invoiceController.getInfoBill(id);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblDishOrder = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        btnExport = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        txtTotalPrice = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblDishOrder.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblDishOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Quantity", "Price"
            }
        ));
        jScrollPane1.setViewportView(tblDishOrder);

        jButton1.setBackground(new java.awt.Color(170, 244, 231));
        jButton1.setText("Pay bill");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnExport.setBackground(new java.awt.Color(170, 244, 231));
        btnExport.setText("Export bill");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(170, 244, 231));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        txtTotalPrice.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExport, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                    .addComponent(btnBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTotalPrice))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Choose file to save");

        // Set default directory
        fileChooser.setCurrentDirectory(new File("D:\\Learning-IT\\PROG191 - Java Programming\\DataOfBill"));

        int userSelection = fileChooser.showSaveDialog(this);
        if(userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();

            // Append a timestamp to the file name to make it unique
            String fileName = fileToSave.getName();
            File fullPath = new File(fileToSave.getParentFile(), fileName);

            try {
                FileWriter fw = new FileWriter(fullPath);
                BufferedWriter bw = new BufferedWriter(fw);
                bw.write("======== Bill ========\n");
                bw.write("-- Date: " + dateOrder + "\n");
                bw.write("-- Order ID: " + orderID + "\n");
                bw.write("-- Name: " + customerName + "\n");
                bw.write("-- Total: " + totalPrice + "\n");
                bw.write("-- Status: " + (status ? "Paid" : "Unpaid") + "\n");
                bw.write("======= Dishes =======\n");
                for (int i = 0; i < tblDishOrder.getRowCount(); i++) {
                    for (int j = 0; j < tblDishOrder.getColumnCount(); j++) {
                        if (j != tblDishOrder.getColumnCount() - 1)
                            bw.write(tblDishOrder.getValueAt(i, j).toString() + "-");
                        else
                            bw.write(tblDishOrder.getValueAt(i, j).toString());
                    }
                    bw.newLine();
                }
                bw.write("======================\n");
                JOptionPane.showMessageDialog(this, "Export Successfully!");
                bw.close();
                fw.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Fail, try again!");
            }
        }
    }//GEN-LAST:event_btnExportActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (txtTotalPrice.getText().equals("0")) 
        {
            JOptionPane.showMessageDialog(this, "You did not order anything!");
            return;
        }
        
        int choice = JOptionPane.showConfirmDialog(this, "Does the customer pay the bill!");

        if (choice == 0) {
            invoiceController.setBillStatus(orderID);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Invoice().setVisible(true);
//            }
//        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblDishOrder;
    private javax.swing.JTextField txtTotalPrice;
    // End of variables declaration//GEN-END:variables

    public void displayListOrderDishes(ArrayList<DishOrder> listOrderDishes) {
        orderDishesTableModel.setRowCount(0);
        for (DishOrder model: listOrderDishes)
        {
            String formattedNumber = formatWithCommas(model.getTotalPrice());
            orderDishesTableModel.addRow(new Object[] {
                tblDishOrder.getRowCount()+1, 
                model.getName(),
                model.getQuantity(),
                formattedNumber
            });
        }
        tblDishOrder.repaint();
    }
    
    public void displayTotalMoney(double money) {
        String formattedNumber = formatWithCommas(money);
        txtTotalPrice.setText(formattedNumber);
        totalPrice = formattedNumber;
    }
    
    public void resultPayBill(int id) {
        switch (id) 
        {
            case -1 -> JOptionPane.showMessageDialog(this, "There was an error, try again!");
            case 0 -> JOptionPane.showMessageDialog(this, "You paid the bill!");
            case 1 -> { 
                JOptionPane.showMessageDialog(this, "Thank you for eating at our restaurant!");
                this.dispose();
            }
        }
    }
    
    public void returnInfoBill(Order model) {
        customerName = model.getCustomerName();
        status = model.isStatus();
        dateOrder = model.getDateOrder();
    }
     
    public String formatWithCommas(double number) {
        NumberFormat numberFormat = NumberFormat.getNumberInstance(Locale.US);
        return numberFormat.format(number);
    }

}
